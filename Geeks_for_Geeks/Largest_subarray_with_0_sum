/*
Given an array having both positive and negative integers. 
The task is to compute the length of the largest subarray with sum 0.

Example:
    Input: N = 8, A[] = {15,-2,2,-8,1,7,10,23}
    Output: 5
    Explanation: The largest subarray with sum 0 will be -2 2 -8 1 7.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
-1000 <= A[i] <= 1000, for each valid i
*/

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   unordered_map<int,int> hmap;
        int max_len = 0;
        int csum = 0;
        for (int i=0;i<n;i++){
            csum += A[i];
            if (csum==0){
                max_len = i+1;
            }
            if (hmap.find(csum)!=hmap.end()){    // (or) if (hmap.count(csum)!=0)
                max_len = max(max_len, i-hmap[csum]);
            }
            else {
                hmap[csum]=i;
            }
        }
        return max_len;
    }
};